find.packages(:devtools"")
find.packages("devtools")
find.package("devtools")
find.package("devtools")
install.packages("devtools")
find.package("devtools")
library(devtools)
library(devtools)
find_rtools()
exit
exit()
quit
close()
x = 11
print (x)
x
print x
x
X
y <-7
y
ls
ls()
rm (y)
y
x.1 = 14
x1
x.1
x = "fsfshjk hsfdkjh"
x
11 + 14
sqrt(25)
sqrt(5)
log(2.71)
y = 8
y^(0.5)
log2(8)
ls
ls()
x.1
abs(-15)
sqrt
sqrt(y)
the code below if for .....
# the code below if for .....
clear
clc
clr
x = 9
x <- 11
x
x1 = c(1,3,5,9)
x1
gender = c("male","female")
gender
2:7
seq(from=1, to=7, by=1)
seq(from=1, to=7, by=0.25)
rep(1, times=10)
rep(1:3, times=5)
1:8
seq(from=1, to=8, by=3)
rep(seq(from=1, to=8, by=3), times=4)
x = 1:5
y = c(1,3,5,7,9)
y
x + 10
x - 10
x
x*2
x + y
x*y
x/y
x
y
y[3]
x[-3]
y[1:3]
ls
ls()
sqrt(4)
sqrt(4
)
getwd
getwd()
library(KernSmooth)
x <- list(a = 1:5, b= rnorm(10))
lapply(x,mean)
a
x[1]
x[2]
d <- rnorm(100,5)
d
b <- rnorm(10,1)
b
rnorm?
help(\)
help('rnorm')
a <- array(rnorm(2*2*10),CC(2,2,10))
a <- array(rnorm(2*2*10),C(2,2,10))
a <- array(rnorm(2*2*10),C(2,2,10))
a <- array(rnorm(2 * 2 * 10), c(2,2,10))
a
debug(ls)
ls
ls
exit
exit()
library(datasets)
iris?
)
data(iris)
?iris
iris
iris(iris$Species == verginica)
iris$Species
tapply(iris, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
data(mtcars)
mtcars
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars$mpg, mtcars$cyl, mean)
mtcars$mpg
mtcars$cyl
lapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x
x[2,3] - x[2,1]
dim(x)
209.21429 -  82.63636
m <- Null
m <- NULL
m
type(m)
typeof(m)
class(m)
attributes(m)
set.seed(1)
rpois(5,2)
dnorm?
)
?dnorm
rnorm?
)
?rnorm
?pnorm
?qnorm
set.seed(1)
rpois(5,2)
getwd()
1/Inf
msg <- "hello" + "world"
msg <- "hello" , "world"
msg <- "hello" "world"
vector(6,10)
vector("6",10)
vector(6, length = 10)
vector("numeric", length = 10)
vector("numeric" = 9, length = 10)
vector("numeric",9, length = 10)
x <- -2:2
x
as.logical(x)
m <- matrix(nrow = 2, ncol = 3)
m
attributes(m)
x <- list(1:2,"d")
x
x <- "d":"h"
x
x <- factor(c("yes", "yes", "no", "hi", "hi"))
x
x <- factor(c("yes", "yes", "no", "hi", "hi"), levels = c("no"))
x
x <- factor(c("yes", "yes", "no", "hi", "hi"), levels = c("no", "yes"))
x
x <- factor(c("yes", "yes", "no", "hi", "hi"), levels = c("no", "yes", "hi"))
x
x <- 1:4
x
names(x)
names(x) <- c("hi", "ho")
x
names(x)
x <- sys.time()
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
unclass(p)
x <- Sys.time()
x
p <- as.POSIXct()
x
p <- as.POSIXct(x)
p
unclass(p)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
mean(r[21:30])
mean(x[21:30])
f <- gl(3, 10)
f
tapply(x, f, mean)
str(split)
install.packages("RMySQL")
R.home()
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
library(Rmysql)
library(RMySQL)
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
Sys.getenv('MYSQL_HOME')
install.packages('RMySQL',type='source')
2+2
install.packages("swirl")
library(swirl)
help(paste)
paste(1:12)
a <- 1:3
a
paste(a, "A")
paste("A", 1:6, sep = "")
paste(1:2, 1:6, sep = "")
help(cat)
cat("A",1:2)
cat("A",1:2, sep =";")
cat("A",1:2, sep ="")
x <- Sys.time()
x
a <- as.POSIXlt(x)
a
names(a)
names(unclass(a))
unclass(a)
b <- as.POSIXct(x)
b
names(b)
unclass(b)
names(unclass(b))
x <- Sys.time()
b <- as.POSIXct(x)
b
unclass(b)
runif(2)
runif(6)
a <- runif(4)
typeof(a)
help(array)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[, 1:5])
set.seed(3435)
trainIndicator = rbinom(4601, size =1, prob = 0.5)
help(rbinom)
trainIndicator
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
names(trainSpam)
head(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
*This text!*
library(knitr)
install.packages("knitr")
library(knitr)
title: "Untitled"
title: "Untitled"
title: "Untitled"
clc
clear
setwd("../Desktop/Github//RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"), header = TRUE)
data$date <- as.Date(data$date)
data_wNA <- data[complete.cases(data), ]
library(plyr)
daily_steps <- ddply(data_wNA,.(date), summarize, sum = sum(steps))
daily_steps$date <- as.Date( daily_steps$date, '%Y-%m-%Y')
hist(daily_steps$sum, col = "red", main = "Histogram: Number of steps each day",
xlab = "No. of Steps", breaks = 10)
cat("The mean value for the number of steps each day is ",
mean(daily_steps$sum),".")
cat("The median value for the number of steps each day is ",
median(daily_steps$sum),".")
int_steps <- ddply(data_wNA,.(interval), summarize, mean = mean(steps))
plot(int_steps$interval, int_steps$mean, xlab = "interval",
ylab = "#(average) of steps", type = "l")
cat("The interval which has the highest average number of steps is ",
match(max(int_steps$mean), int_steps$mean),"th observation: ",
int_steps$interval[match(max(int_steps$mean), int_steps$mean)])
cat("The total number of missing values in the dataset is: ",
sum(is.na(data$steps)))
new_data <- data
for(i in 1:nrow(new_data)){
if(is.na(new_data$steps[i]) == TRUE){
new_data$steps[i] <- floor(int_steps$mean[match(new_data$interval[i],
int_steps$interval)])
}
}
n_daily_steps <- ddply(new_data,.(date), summarize, sum = sum(steps))
n_daily_steps$date <- as.Date(n_daily_steps$date, '%Y-%m-%Y')
hist(n_daily_steps$sum, col = "green", main = "Histogram: Number of steps each day",
xlab = "No. of Steps", breaks = 10)
cat("The mean value for the number of steps each day is ",
mean(n_daily_steps$sum),".")
cat("The median value for the number of steps each day is ",
median(n_daily_steps$sum),".")
head(new_data)
data_wNA$day <- weekdays(data_wNA$date, abbreviate = TRUE)
head(data_wNA)
weekdays()
daily_steps$day <- weekdays(daily_steps$date, abbreviate = TRUE)
head(daily_steps)
head(daily_steps, n = 8)
n_daily_steps$day <- weekdays(n_daily_steps$date, abbreviate = TRUE)
head(n_daily_steps, n= 8)
weekday <- c("Mon", "Tue", "Wed", "Thu", "Fri")
weekday
weekday[1] == n_daily_steps$day[1]
weekdays(n_daily_steps$date[1], abbreviate = TRUE) in weekday
weekdays(n_daily_steps$date[1], abbreviate = TRUE)
weekdays(n_daily_steps$date[1], abbreviate = TRUE) %in% weekday
for(i in 1:nrow(new_data)){
if(weekdays(new_data$date[i]) %in% weekday){new_data$day <- "weekday"}
else{new_data$day <- "weekend"}
}
head(new_data)
new_data$exday <- weekdays(new_data$date, abbreviate = TRUE)
head(new_data)
for(i in 1:nrow(new_data)){
if(weekdays(new_data$date[i], abbreviate = TRUE) %in% weekday){
new_data$day <- "weekday"}
else{
new_data$day <- "weekend"}
}
head(new_data)
